(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.pageRank=f()}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){module.exports=pageRank;var elementsPerNode=5;function pageRank(graph,internalJumpProbability,epsilon){if(typeof epsilon!=="number")epsilon=.005;if(typeof internalJumpProbability!=="number")internalJumpProbability=.85;var nodesCount=graph.getNodesCount();var asmGraph=initializeAsmGraph(graph);var nodes=asmGraph.nodes;var edges=asmGraph.edges;computePageRank(nodes,edges,nodesCount,internalJumpProbability,epsilon);return finalResultsFromAsm(nodes,asmGraph.numberToId)}function computePageRank(nodes,edges,nodesCount,internalJumpProbability,epsilon){var done=false;var distance=0;var leakedRank=0;var currentRank;var idx;do{leakedRank=0;for(var j=0;j<nodesCount;++j){idx=j*elementsPerNode;currentRank=0;var neighborsLength=nodes[idx+3];if(neighborsLength===0){nodes[idx]=0}else{var neighborsStart=nodes[idx+4];for(var i=neighborsStart;i<neighborsStart+neighborsLength;++i){var nIdx=edges[i];currentRank+=nodes[nIdx+1]/nodes[nIdx+2]}nodes[idx]=internalJumpProbability*currentRank;leakedRank+=nodes[idx]}}leakedRank=(1-leakedRank)/nodesCount;distance=0;for(j=0;j<nodesCount;++j){idx=j*elementsPerNode;currentRank=nodes[idx]+leakedRank;distance+=Math.abs(currentRank-nodes[idx+1]);nodes[idx+1]=currentRank}done=distance<epsilon}while(!done)}function finalResultsFromAsm(nodes,idLookup){var result=Object.create(null);var length=nodes.length/elementsPerNode;for(var i=0;i<length;++i){var idx=i*elementsPerNode;result[idLookup[i]]=nodes[idx+1]}return result}function initializeAsmGraph(graph){var i=0;var lastEdge=0;var nodesCount=graph.getNodesCount();var edgesCount=graph.getLinksCount();var initialRank=1/nodesCount;var nodes=new Float64Array(nodesCount*elementsPerNode);var edges=new Float64Array(edgesCount);var numberToId=new Array(nodesCount);var idToNumber=Object.create(null);graph.forEachNode(addNode);graph.forEachNode(initLinks);return{nodes:nodes,edges:edges,numberToId:numberToId};function addNode(node){var idx=i*elementsPerNode;nodes[idx]=initialRank;nodes[idx+1]=initialRank;nodes[idx+2]=0;nodes[idx+3]=0;nodes[idx+4]=-1;idToNumber[node.id]=i;numberToId[i]=node.id;i+=1}function initLinks(node){var idx=idToNumber[node.id]*elementsPerNode;var inDegree=0;var outDegree=0;var edgeStart=lastEdge;graph.forEachLinkedNode(node.id,initLink);nodes[idx+2]=outDegree;nodes[idx+3]=inDegree;if(edgeStart!==lastEdge){nodes[idx+4]=edgeStart}function initLink(otherNode,link){if(link.fromId===node.id){outDegree+=1}if(link.toId===node.id){inDegree+=1;edges[lastEdge++]=idToNumber[otherNode.id]*elementsPerNode}}}}},{}]},{},[1])(1)});